// 冒泡排序
void bubblesort(int arr[], int n)
{
	
	cout << "n：" << n << endl;
	for (int i = 0; i < n - 1; i++)
	{
		bool flag = false;
		for (int j = 0; j < n - i - 1; ++j)
		{
			if (arr[j] > arr[j + 1])
			{
				swap(arr[j], arr[j + 1]);
				flag = true;
			}
		}
		if (!flag) break;
	}
}
// 插入排序
void insertsort(int arr[], int n)
{
	int temp;
	for (int i = 1; i < n; ++i)
	{
		temp = arr[i];
		if (arr[i - 1] > arr[i] )
		{
			int j = i - 1;
			while (j>=0 && arr[j] > temp )
			{
				arr[j + 1] = arr[j ];
				j--;
			}
			arr[j + 1] = temp;
		}
	}
}
// 选择排序
void selectsort(int arr[], int n)
{
	int key = 0;
	for (int i = 0; i < n; i++)
	{
		key = i;
		int j = i;
		while (j < n)
		{
			if (arr[j] < arr[key])
				key = j;
			j++;
		}
		if (key != i)
			swap(arr[i], arr[key]);

	}
}

// 归并排序
void merage(int arr[], int left, int right, int mid)
{
	vector<int> temp(right - left + 1);
	int i = left; //左序列指针
	int j = mid + 1; //右序列指针
	int index = 0; //临时数组指针
	while (i <= mid && j <= right)
	{
		if (arr[i] <= arr[j])
			temp[index++] = arr[i++];
		else
			temp[index++] = arr[j++];
	}
	while (i <= mid) //将左边剩余元素填充进temp中
		temp[index++] = arr[i++];
	while (j <= right) //将右序列剩余元素填充进temp中
		temp[index++] = arr[j++];

	index = 0;
	//将temp中的元素全部拷贝到原数组中
	while (left <= right) {
		arr[left++] = temp[index++];
	}
	vector<int>().swap(temp);

}
void meragesort(int arr[], int left, int right)
{
	if (left < right)
	{
		int mid = (right + left) / 2;
		meragesort(arr, left, mid);
		meragesort(arr, mid+1, right);
		merage(arr, left, right, mid);
	}
}
// 快速排序
void quicksort(int arr[], int _left, int _right)
{
	int left = _left;
	int right = _right;
	int key = 0;
	if (left <= right) {   //待排序的元素至少有两个的情况

		key = arr[left];  //待排序的第一个元素作为基准元素

		while (left != right) {   //从左右两边交替扫描，直到left = right

			while (right > left && arr[right] >= key)
				right--;        //从右往左扫描，找到第一个比基准元素小的元素
			arr[left] = arr[right];  //找到这种元素arr[right]后与arr[left]交换

			while (left < right && arr[left] <= key)
				left++;         //从左往右扫描，找到第一个比基准元素大的元素
			arr[right] = arr[left];  //找到这种元素arr[left]后，与arr[right]交换

		}
		arr[left] = key;    //基准元素归位
		quicksort(arr, _left, left - 1);  //对基准元素左边的元素进行递归排序
		quicksort(arr, right + 1, _right);  //对基准元素右边的进行递归排序
	}

}
void Adjust(int *arr, int root, int len)
{

	int key = arr[root];
	int j = 2 * root + 1; // 当前节点的左孩子
	while(j<=len)
	{
		if (j<len&&arr[j]<arr[j + 1])
		{
			j++;         // 关键字较大的记录的下标
		}
		if (key < arr[j])
		{
			arr[(j - 1) / 2] = arr[j]; // (j - 1) / 2 指向 j 的父节点
			j = j * 2 + 1;
		}
		else
		{
			break;
		}
	}
	arr[(j - 1) / 2] = key;
}
void HeapSort(int *arr, int len)//堆排序
{
	int i;
	for (i = len / 2; i >= 0; i--)
	{
		Adjust(arr, i, len - 1);
	}

	for (i = len - 1; i>=0; i--)
	{
		swap(arr[0], arr[i]);
		Adjust(arr, 0, i - 1);
	}
}
void main()
{
	int arr[] = { 1,0,6,3,5,9,8,2,7,4 };//,6,3,5,9,8,2,7,4 
	int arr2[] = {50, 10, 90, 30, 70, 40, 80, 60, 20};
	int n = sizeof(arr) / sizeof(arr[0]);
	//bubblesort(arr,n);
	//insertsort(arr,n);
	//selectsort(arr,n);
	//meragesort(arr, 0, n-1);
	//quicksort(arr, 0, n-1);
	HeapSort(arr2, 9);
	for (auto x : arr2)
		cout << x << endl;
}


1.回文数
bool isPalindrome(int x) {
	if (x < 0) return false;
	int div = 1;
	while (x / div >= 10) div *= 10;
	while (x > 0)
	{
		int left = x / div;
		int right = x % 10;
		if (left != right) return false;
		
		x = (x % div) / 10;
		div /= 100;
	}
	return true;

}

2.两数之和
vector<int> twosum(vector<int>& nums, int target)
{
	unordered_map<int, int> mp;
	vector<int> ans;
	for (int i = 0; i < nums.size(); i++)
	{
		if (mp.count(target - nums[i]))
		{
			ans.push_back(i);
			ans.push_back(mp[target - nums[i]]);
		}
		mp[nums[i]] = i;
	}
}

3.三数之和
vector<vector<int>> threesum(vector<int>& nums, int target)
{
	if(nums.size() < 3) return {}
	sort(nums.begin(), nums.end());
	vector<vector<int>> res;
	for(int k = 0; k <nums.size();k++)
	{
		int left = k + 1;
		int right = nums.size()-1;
		if(nums[k] > 0)  break;
		if(k > 0 && nums[k] = nums[k-1]) continue;
		int target = -1 * nums[k];
		while(left <right)
		{
			if(nums[left] + nums[right] == target)
			{
				res.push_back({nums[k],nums[left],nums[right]});
				while(left < right && nums[left] == nums[left + 1]) 
					left ++;
				while(left <right && nums[right] == nums[right-1])
					right--;
			}
			else if(nums[left] + nums[right] < target)
			{
				left ++;
			}
			else
			{
				right --;
			}
		}
	}
	return res;
}


4.二叉树中相距最远的两个节点之间的距离，二叉树每个节点的左右字数高度和的最大值
int tree_height(Node* root, int& max_distance)
{
	int left = root->left ? tree_height(root->left,max_distance) + 1 :0;
	int right = root->right ? tree_height(root->right,max_distance) + 1:0;
	max_distance = max(left + right, max_distance);
	return left > right ? left : right;
}
int tree_dis(Node* root)
{
	int max_distance = 0;
	if(root)
		tree_height(root, max_distance);
	return max_distance;
}


5.二叉树是否平衡二叉树
int tree_height(Node* root,bool balanced)
{
	int left = root->left ? tree_height(root->left, balanced) + 1:0;
	if(!balanced) return 0;
	int right = root->right ? tree_height(root->right, balanced) + 1:0;
	if(!balanced) return 0;
	if(abs(left - right) > 1) balanced = false;
	return left > right ? left : right;
}
bool balanced_tree(Node* root)
{
	bool balanced == true;
	if(root) tree_height(root, balanced);
	return balanced;
}


6.给定两节点求其最近共同父节点
bool find(Node* root, Node* va, Node* vb,  Node* parent, Node*& result)
{
	bool left = false;
	if(root->left)
	{
		left = find(root->left, va, vb, root, result);
		if(result) return false;
	}
	
	bool right = false;
	if(root->right)
	{
		right = find(root->right, va, vb, root, result);
		if(result) return false;
	}
	
	int mid = root == left + root == right;
	int ret = left + right + mid;
	if(ret == 2)
		result = (mid != 0 ? parent : root);
	return ret == 0 ? false : true;
}
Node* findParent(Node* root, Node* left, Node*right)
{
	Node* result = nullptr;
	if(root) 
		find(root, left, right, NULL, result);
	return result;
		
}



7.字符串相乘
string multy(string str1, string str2)
{
	int size1 = str1.size();
	int size2 = str2.size();
	vector<int> vec(size1 + size2, 0);
	for(int i = size1- 1; i >= 0; i--)
		for(int j = size2 - 1; j >= 0; j--)
		{
			int p1 = i + j, p2 = i + j + 1;
			int sum = (str1[i] - '0') * (str2[j] - '0') + vec[p2];
			vec[p1] = sum / 10;
			vec[p2] = sum % 10;
			
		}
	string ans;
	for(auto at: vec)
	{
		if(!ans.empty() || at != 0)
			ans.append(at + '0');
	}
	return ans;
	
}
